theory FArray_FArray imports "../AbiTypes" "../Hex" "../AbiDecode"

begin

(* solidity *)

(*



 contract C {
    function getEncoding() external returns (bytes memory) {
        uint256[2] memory x1 = [uint256(41), uint256(42)];
        uint256[2] memory x2 = [uint256(42), uint256(43)];
        uint256[2] memory x3 = [uint256(43), uint256(44)];

        uint256[2][3] memory x = [x1, x2, x3];
        return abi.encode(x);
    }
}
*)

(* hex output *)

(*

 0x0000000000000000000000000000000000000000000000000000000000000029000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002b000000000000000000000000000000000000000000000000000000000000002b000000000000000000000000000000000000000000000000000000000000002c

*)

definition test_in :: "8 word list" where
"test_in = hex_splits ''0000000000000000000000000000000000000000000000000000000000000029000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002b000000000000000000000000000000000000000000000000000000000000002b000000000000000000000000000000000000000000000000000000000000002c''"

definition test_schema :: abi_type where
"test_schema = Tfarray (Tfarray (Tuint 256) 2) 3"

definition test_out :: "abi_value" where
"test_out = Vfarray (Tfarray (Tuint 256) 2) 3
            [Vfarray (Tuint 256) 2 (map (Vuint 256) [41, 42])
            ,Vfarray (Tuint 256) 2 (map (Vuint 256) [42, 43])
            ,Vfarray (Tuint 256) 2 (map (Vuint 256) [43, 44])]"

value "decode test_schema test_in"
end