theory Array imports "../Hex" "../AbiTypes"

begin

(* solidity *)
(*
 contract C {
    function getEncoding() external returns (bytes memory) {
        uint256[] memory x = new uint256[](3);
        x[0] = 42; x[1] = 23; x[2] = 48;
        return abi.encode(x);
    }
}
*)

(* hex output (raw) *)

(*
{
	"0": "bytes: 0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000170000000000000000000000000000000000000000000000000000000000000030"
}
*)

(* hex output (trimmed) *)

(*
{
	"0": "bytes: 0x0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000170000000000000000000000000000000000000000000000000000000000000030"
}
*)

definition test_in :: "8 word list" where
"test_in = hex_splits ''0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000170000000000000000000000000000000000000000000000000000000000000030''"

definition test_schema :: abi_type where
"test_schema = Tarray (Tuint 256)"

definition test_out :: "abi_value" where
"test_out = Varray (Tuint 256) (map (Vuint 256) [42, 23, 48])"

value "test_out"

value "test_in"

value "decode test_schema test_in"

end